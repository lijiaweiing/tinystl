#ifndef STL_DEQUE_H
#define STL_DEQUE_H
#include"alloc.h"
#include<stl_uninitialized.h>
#include"stl_construct.h"
namespace tinystl {
inline size_t __deque_buf_size(size_t n,size_t sz)
{
    return (n!=0)?n:(sz < 512 ? size_t(512/sz):size_t(1));
}
//deque 的迭代器
template<class T,class Ref,class Ptr,size_t BufSiz>
struct __deque_iterator
{
  typedef __deque_iterator<T,T&,T*,BufSiz> iterator;
  typedef __deque_iterator<T,const T&,const T*,BufSiz> const_iterator;
  typedef random_access_iterator_tag iterator_category;
  static size_t buffer_size(){return __deque_buf_size(BufSiz,size_t(T));}
  typedef T value_type;
  typedef Ptr pointer;
  typedef Ref reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef T** map_pointer;
  typedef __deque_iterator self;
  T* cur;
  T *first;
  T* finish;
  map_pointer map;
  void set_node(map_pointer new_node)
  {
    node = new_node;
    first = *node;
    last = *node+difference_type(BufSiz());
  }
  reference operator*()const {return *cur;}
  pointer operator->()const {return &(operator*());}
  difference_type operator-()

};


}
